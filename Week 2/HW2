1. Write in pseudo code a selection sort algorithm the works over an array. Comment to explain the algorithm.
    
    Iterate through each element in the array
        Remember what our minimum index is
        Find the minimum element in every iteration 
            Update the minimum index accordingly
        Swap the two elements to sort the array

2. Write in the programming language of your choice a selection sort algorithm that works over an array. Comment to explain the algorithm.
    https://github.com/johndavidrea/CS240/blob/main/Week%202/SelectionSort.py

3. Write in pseudo code an insertion sort algorithm the works over an array. Comment to explain the algorithm.

    Check the arrat, if the array has less than two elements sorting isn't needed
    Iterate over the array starting from the second element
        Store the current element as the key to be inserted, store the index for it
        If an element is greater than the key:
            Move the element to the right
        Now put the key into the correct position

4. Write in the programming language of your choice an insertion sort algorithm that works over an array. Comment to explain the algorithm.
    https://github.com/johndavidrea/CS240/blob/main/Week%202/InsertionSearch.py

5. How do the best, average and worst case time complexities compare between these two algorithms? Why is the best case different between insertion and selection?
    The average and worst case time complexity is O(n^2) for both sorting algorithms. The best case for selection sort is still O(n^2), while the best case for insertion sort drops down to O(n).
    Selection sort always performs the same number of comparisons when sorting an array regardless of whether or not the array was sorted beforehand.
    Insertion sort will benefit from a partially sorted array as the more "sorted" the array is, the less comparisons it needs to make.

6. Use the attached file numbers-1.txt Download numbers-1.txt and sort the values using your two sort algorithms. What value is in position 7586?
    7608064
